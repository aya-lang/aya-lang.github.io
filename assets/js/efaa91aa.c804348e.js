"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[796],{8430:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"lists","title":"Lists","description":"List literals are created using square brackets and do not need commas. Literals are first evaluated as their own stack. The results remaining on the stack become the list items.","source":"@site/docs/lists.md","sourceDirName":".","slug":"/lists","permalink":"/docs/lists","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/lists.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Translate your site","permalink":"/docs/tutorial-extras/translate-your-site"}}');var i=t(4848),r=t(8453);const a={},l="Lists",d={},c=[{value:"Essential List Operations",id:"essential-list-operations",level:2},{value:"List Indexing",id:"list-indexing",level:3},{value:"Essential List Operators",id:"essential-list-operators",level:3},{value:"Extend (<code>K</code>)",id:"extend-k",level:4},{value:"Join (<code>J</code>)",id:"join-j",level:4},{value:"Reshape (<code>L</code>)",id:"reshape-l",level:4},{value:"Flatten (<code>.F</code>)",id:"flatten-f",level:4},{value:"Pop from front / back",id:"pop-from-front--back",level:4},{value:"Append to front / back",id:"append-to-front--back",level:4},{value:"Generators",id:"generators",level:3},{value:"Range (<code>R</code>)",id:"range-r",level:4},{value:"List comprehension",id:"list-comprehension",level:2},{value:"The Broadcast Operator",id:"the-broadcast-operator",level:2}];function o(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"lists",children:"Lists"})}),"\n",(0,i.jsx)(n.p,{children:"List literals are created using square brackets and do not need commas. Literals are first evaluated as their own stack. The results remaining on the stack become the list items."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"[1 2 3 4 5]      .# Do not use commas\n[1 2 + 7 2 - 3!] .# => [3 5 -3]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["List literals can grab items from the outer stack using the format ",(0,i.jsx)(n.code,{children:"... [num| ...]"})," where num is an integer literal."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'aya> 1 2 3 4 5 [3| 6 7 8]\n1 2 [3 4 5 6 7 8]\n\naya> \'h \'e [2|\'l \'l \'o]\n"hello"\n\naya> "a" "b" [2|]\n["a" "b"]\n'})}),"\n",(0,i.jsx)(n.p,{children:"List grabbing only uses integer literals"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"aya> 2 :n\n2\naya> 1 2 [n| 3 4]\nERROR: Empty stack at operator '|'\nstack:\n\t1 2\njust before:\n\n"})}),"\n",(0,i.jsx)(n.h2,{id:"essential-list-operations",children:"Essential List Operations"}),"\n",(0,i.jsx)(n.h3,{id:"list-indexing",children:"List Indexing"}),"\n",(0,i.jsxs)(n.p,{children:["Lists are indexed using square bracket syntax following a ",(0,i.jsx)(n.code,{children:"."}),". For Example:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'aya> ["the" "cat" "in" "the" "hat"]:list\n[ "the" "cat" "in" "the" "hat" ]\naya> list.[0]\n"the"\n'})}),"\n",(0,i.jsx)(n.p,{children:"Aya supports negative indexing, multiple indexing and filtering with this syntax."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'aya> list.[:1]\n"hat"\naya> list.[1 4]\n[ "cat" "hat" ]\naya> list.[{E 3 =}]\n[ "the" "cat" "the" "hat" ]\n'})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Arg Type"}),(0,i.jsx)(n.th,{children:"Function"}),(0,i.jsx)(n.th,{children:"Input"}),(0,i.jsx)(n.th,{children:"Output"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Number"}),(0,i.jsx)(n.td,{children:"Choose the nth item from the list (starting from 0)"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"[1 2 3].[1]"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"2"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"List"}),(0,i.jsx)(n.td,{children:"Use each item in the second list to index the first"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:'"abc".[1 2 2]'})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:'"bcc"'})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Block"}),(0,i.jsx)(n.td,{children:"Filter the list. Take all items that satisfy the block"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"[1 1 2 2].[{1=}]"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"[1 1]"})})]})]})]}),"\n",(0,i.jsxs)(n.p,{children:["Lists can also be indexed using the ",(0,i.jsx)(n.code,{children:"I"})," operator:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'aya> ["the" "cat" "in" "the" "hat"]:list\n[ "the" "cat" "in" "the" "hat" ]\naya> list 0 I\n"the"\naya> list :1 I\n"hat"\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:".I"})," operator takes a default value if the index is out of bounds:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'aya> ["hello" "world"] 0 "nope" .I\n"hello"\naya> ["hello" "world"] 9 "nope" .I\n"nope"\n'})}),"\n",(0,i.jsx)(n.p,{children:"Use the following syntax to set elements of a list"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"item list.:[i]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["which is equivalent to ",(0,i.jsx)(n.code,{children:"list[i] = item"})," in C-style languages."]}),"\n",(0,i.jsx)(n.h3,{id:"essential-list-operators",children:"Essential List Operators"}),"\n",(0,i.jsxs)(n.h4,{id:"extend-k",children:["Extend (",(0,i.jsx)(n.code,{children:"K"}),")"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"aya> [1 2 3] :list\n[ 1 2 3 ]\naya> list [4 5 6] K\n[ 1 2 3 4 5 6 ]\naya> list\n[ 1 2 3 4 5 6 ]\n"})}),"\n",(0,i.jsxs)(n.h4,{id:"join-j",children:["Join (",(0,i.jsx)(n.code,{children:"J"}),")"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.em,{children:["Similar to ",(0,i.jsx)(n.code,{children:"K"})," but never modifies either list"]})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"aya> [1 2 3] :list;\naya> list [4 5 6] J\n[ 1 2 3 4 5 6 ]\naya> list\n[ 1 2 3 ]\n"})}),"\n",(0,i.jsxs)(n.h4,{id:"reshape-l",children:["Reshape (",(0,i.jsx)(n.code,{children:"L"}),")"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"aya> 9R [3 3] L\n[ [ 1 2 3 ] [ 4 5 6 ] [ 7 8 9 ] ]\naya> [1 2] [2 2 2] L\n[ [ [ 1 2 ] [ 1 2 ] ] [ [ 1 2 ] [ 1 2 ] ] ]\naya> 100R [2 3] L\n[ [ 1 2 3 ] [ 4 5 6 ] ]\n"})}),"\n",(0,i.jsxs)(n.h4,{id:"flatten-f",children:["Flatten (",(0,i.jsx)(n.code,{children:".F"}),")"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"aya> [[1 2] [3] 4 [[5] 6]] .F\n[ 1 2 3 4 5 6 ]\n"})}),"\n",(0,i.jsx)(n.h4,{id:"pop-from-front--back",children:"Pop from front / back"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"aya> [1 2 3] B\n[ 1 2 ] 3\naya> [1 2 3] V\n[ 2 3 ] 1\n"})}),"\n",(0,i.jsx)(n.h4,{id:"append-to-front--back",children:"Append to front / back"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"aya> 1 [2 3] .B\n[ 2 3 1 ]\naya> 1 [2 3] .V\n[ 1 2 3 ]\n"})}),"\n",(0,i.jsx)(n.h3,{id:"generators",children:"Generators"}),"\n",(0,i.jsxs)(n.h4,{id:"range-r",children:["Range (",(0,i.jsx)(n.code,{children:"R"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:["One item: create a range from ",(0,i.jsx)(n.code,{children:"1"})," (or ",(0,i.jsx)(n.code,{children:"'a'"}),") to that number."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'10 R    .# => [1 2 3 4 5 6 7 8 9 10]\n\'B R    .# => "...56789:;<=>?@AB" (from char code `1` to the input char)\n'})}),"\n",(0,i.jsx)(n.p,{children:"Two items: create a range from the first to the second."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'[5 10] R     .# => [5 6 7 8 9 10]\n[\'z \'w] R    .# => "zyxw"\n"zw" R       .# => "zyxw"\n'})}),"\n",(0,i.jsx)(n.p,{children:"Three items: create a range from the first to the third using the second as a step."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"[0 0.5 2] R      .# => [0 0.5 1.0 1.5 2.0]\n[2 2.5 4] R      .# => [2 2.5 3 3.5 4]\n"})}),"\n",(0,i.jsx)(n.h2,{id:"list-comprehension",children:"List comprehension"}),"\n",(0,i.jsxs)(n.p,{children:["When commas are used inside of a list literal, the list is created using list comprehension. List comprehension follows the format ",(0,i.jsx)(n.code,{children:"[range, map, filter1, filter2,  ..., filterK]"}),". The range section is evaluated like the ",(0,i.jsx)(n.code,{children:"R"})," operator. When the list is evaluated, the sections are evaluated from left to right; first create the range, then map the block to the values, then apply the filters. All filters must be satisfied for an item to be added to the list."]}),"\n",(0,i.jsx)(n.p,{children:"If the map section is left empty, the list is evaluated as a basic range."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"aya> [10 ,]\n[1 2 3 4 5 6 7 8 9 10]\n\naya> ['\\U00A3' '\\U00B0' ,]\n\"\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\"\n\naya> [0 3 15 , T]\n[0 -3 -6 -9 -12 -15]\n"})}),"\n",(0,i.jsx)(n.p,{children:"Here are some examples using map and filter."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"aya> [10, 2*]\n[2 4 6 8 10 12 14 16 18 20]\n\naya> [10, 2*, 5<]\n[2 4]\n\naya> [10, 2*, 5<, 4=!]\n[2]\n\n.# Can grab from stack\naya> 3 [1| 6 18, 2*]\n[ 6 12 18 24 30 36 ]\n"})}),"\n",(0,i.jsx)(n.p,{children:"If a list literal is used as the first section of a list comprehension, the list comprehension is simply applied to the inner list."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"aya> [ [1 2 3 4 5], 2*, 7<]\n[2 4 6]\n"})}),"\n",(0,i.jsx)(n.p,{children:"If there are two or more lists used as the first argument of a list comprehension, and each list is the same length, all respective elements of each list will be added to the stack when applying the map and filter sections."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'aya> [ [1 2 3][4 5 6], +]\n[5 7 9]\n\naya> [ "hello" "world", J]\n[ "hw" "eo" "lr" "ll" "od" ]\n'})}),"\n",(0,i.jsx)(n.h2,{id:"the-broadcast-operator",children:"The Broadcast Operator"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"#"})," is a very powerful ",(0,i.jsx)(n.em,{children:"infix"})," operator. It's primary function is map. It takes the arguments from its right side and maps them to the list on the left side."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"[1 2 3] # {1 +} .# => [2 3 4]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["If a block is not given on the right side, ",(0,i.jsx)(n.code,{children:"#"})," will collect items until an operator or variable is encountered."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:".# Same as the previous example\n[1 2 3] # 1 + .# => [2 3 4]\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"#"})," will also collect items on its left side until a list is hit. It will add these items to the front of the block being mapped to."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:".# Also the same as the previous line\n[1 2 3] 1 # + .# => [2 3 4]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This operator can be used to construct ",(0,i.jsx)(n.em,{children:'"for loops"'})," on variables"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'"hello" :str;\nstr # {c,\n    c toupper\n}\n=> "HELLO"\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:":#"})," operator works the same way except it ",(0,i.jsx)(n.em,{children:"always"})," takes a list on the left and a block on the right:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"list :# {block}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"aya> [1 2 3] :# {3+}\n[ 4 5 6 ]\n\naya> [1 2 3] 3 :# +\nERROR: Empty stack at operator ':#'\n\naya> [1 2 3] 3 # +\n[ 4 5 6 ]\n\naya> [1 2 3] 3 :# {+}\nTYPE ERROR: Type error at (:#):\n\tExpected ((L:#B|D:#B))\n\tRecieved ({+} 3 )\nstack:\n\t[ 1 2 3 ]\njust before:\n\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var s=t(6540);const i={},r=s.createContext(i);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);